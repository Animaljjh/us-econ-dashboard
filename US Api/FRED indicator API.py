{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f380c899-9ed7-4efc-8c3d-a0f330efa8fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ /Users/jay/us-econ-dashboard/public/PAYEMS.csv 업데이트 완료 (총 1038행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/UNRATE.csv 업데이트 완료 (총 930행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/ICSA.csv 업데이트 완료 (총 3053행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/PCE.csv 업데이트 완료 (총 797행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/RSXFS.csv 업데이트 완료 (총 401행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/UMCSENT.csv 업데이트 완료 (총 871행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/CPIAUCSL.csv 업데이트 완료 (총 942행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/PPIACO.csv 업데이트 완료 (총 1349행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/FEDFUNDS.csv 업데이트 완료 (총 852행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/DFEDTARU.csv 업데이트 완료 (총 25948행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/DGS2.csv 업데이트 완료 (총 12814행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/T10Y2Y.csv 업데이트 완료 (총 12815행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/M2SL.csv 업데이트 완료 (총 797행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/HHMSDODNS.csv 업데이트 완료 (총 318행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/HDTGPDUSQ163N.csv 업데이트 완료 (총 79행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/TOTALSL.csv 업데이트 완료 (총 989행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/BUSLOANS.csv 업데이트 완료 (총 942행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/PERMIT.csv 업데이트 완료 (총 785행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/HOUST.csv 업데이트 완료 (총 797행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/MDSP.csv 업데이트 완료 (총 181행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/GDP.csv 업데이트 완료 (총 317행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/INDPRO.csv 업데이트 완료 (총 1277행)\n",
      "✅ /Users/jay/us-econ-dashboard/public/DGORDER.csv 업데이트 완료 (총 808행)\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "import os\n",
    "import time\n",
    "\n",
    "# 📌 FRED API 키\n",
    "API_KEY = '43bdd51721fd349ba5df235407b6db6b'\n",
    "\n",
    "# 📌 가능한 가장 오래된 날짜부터 수집\n",
    "START_DATE = '1900-01-01'\n",
    "\n",
    "# 📁 CSV를 저장할 public 폴더 경로\n",
    "SAVE_FOLDER = '/Users/jay/us-econ-dashboard/public'\n",
    "\n",
    "# 📌 섹터별 시리즈 목록\n",
    "sectors = {\n",
    "    'Employment': ['PAYEMS', 'UNRATE', 'ICSA'],\n",
    "    'Consumption': ['PCE', 'RSXFS', 'UMCSENT'],\n",
    "    'Inflation': ['CPIAUCSL', 'PPIACO'],\n",
    "    'Interest Rates': ['FEDFUNDS', 'DFEDTARU', 'DGS2', 'T10Y2Y'],  # DFEDTARU는 1950년대 데이터가 이미 CSV에 있다고 가정\n",
    "    'Credit': ['M2SL', 'HHMSDODNS', 'HDTGPDUSQ163N', 'TOTALSL', 'BUSLOANS'],\n",
    "    'Real Estate': ['PERMIT', 'HOUST', 'MDSP'],\n",
    "    'Growth': ['GDP', 'INDPRO', 'DGORDER']\n",
    "}\n",
    "\n",
    "for sector, series_list in sectors.items():\n",
    "    for series_id in series_list:\n",
    "        try:\n",
    "            # 🔗 FRED API 요청 URL\n",
    "            url = (\n",
    "                f'https://api.stlouisfed.org/fred/series/observations'\n",
    "                f'?series_id={series_id}&api_key={API_KEY}&file_type=json&observation_start={START_DATE}'\n",
    "            )\n",
    "\n",
    "            response = requests.get(url)\n",
    "            data = response.json()\n",
    "            observations = data.get('observations', [])\n",
    "\n",
    "            # 📥 API 데이터프레임\n",
    "            new_df = pd.DataFrame(observations)[['date', 'value']]\n",
    "            new_df['date'] = pd.to_datetime(new_df['date'])\n",
    "            new_df['value'] = pd.to_numeric(new_df['value'], errors='coerce')\n",
    "\n",
    "            # 기존 파일 경로\n",
    "            filename = os.path.join(SAVE_FOLDER, f'{series_id}.csv')\n",
    "\n",
    "            # 📂 기존 파일 읽기\n",
    "            if os.path.exists(filename):\n",
    "                old_df = pd.read_csv(filename)\n",
    "                if 'date' not in old_df.columns or 'value' not in old_df.columns:\n",
    "                    old_df = pd.DataFrame(columns=['date', 'value'])\n",
    "                else:\n",
    "                    old_df['date'] = pd.to_datetime(old_df['date'])\n",
    "                    old_df['value'] = pd.to_numeric(old_df['value'], errors='coerce')\n",
    "            else:\n",
    "                old_df = pd.DataFrame(columns=['date', 'value'])\n",
    "\n",
    "            # 🔄 날짜 기준으로 outer merge\n",
    "            merged = pd.merge(\n",
    "                old_df, new_df,\n",
    "                on='date', how='outer',\n",
    "                suffixes=('_old', '_new')\n",
    "            )\n",
    "\n",
    "            # 📌 value_new가 있으면 덮어쓰기, 없으면 기존 value_old 유지\n",
    "            merged['value'] = merged.apply(\n",
    "                lambda row: row['value_new'] if pd.notna(row['value_new']) else row['value_old'],\n",
    "                axis=1\n",
    "            )\n",
    "\n",
    "            # 📌 최종 정리\n",
    "            merged = merged[['date', 'value']].sort_values('date')\n",
    "\n",
    "            # CSV로 저장\n",
    "            merged.to_csv(filename, index=False)\n",
    "            print(f\"✅ {filename} 업데이트 완료 (총 {len(merged)}행)\")\n",
    "\n",
    "            time.sleep(1)  # 속도 제한 방지\n",
    "\n",
    "        except Exception as e:\n",
    "            print(f\"❌ {series_id} 오류: {e}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "facc8f92",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47dddad3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dac3267f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "074aaa64",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75fc9e12-5d9c-4c9b-bbf7-84704725962a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb63b4e3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
